/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface FusePayInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addEmployee"
      | "addMonthlySalaries"
      | "admin"
      | "approveLoan"
      | "companyCID"
      | "companyID"
      | "depositUSDC"
      | "employeeAward"
      | "employeeNames"
      | "employeeSalaries"
      | "employeeWalletBalances"
      | "employees"
      | "getAdmin"
      | "getAllLoanRequests"
      | "getEmployeeName"
      | "getEmployeeSalary"
      | "getEmployeeWalletBalance"
      | "getEmployees"
      | "loans"
      | "rejectLoan"
      | "requestLoan"
      | "selectEmployeeAward"
      | "setEmployeeName"
      | "setEmployeeSalary"
      | "withdrawSalary"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addEmployee",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "addMonthlySalaries",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "approveLoan",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "companyCID",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "companyID", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositUSDC",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "employeeAward",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "employeeNames",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "employeeSalaries",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "employeeWalletBalances",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "employees",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getAdmin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAllLoanRequests",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEmployeeName",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEmployeeSalary",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEmployeeWalletBalance",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getEmployees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "loans",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rejectLoan",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "requestLoan",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "selectEmployeeAward",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setEmployeeName",
    values: [AddressLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setEmployeeSalary",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawSalary",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addEmployee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addMonthlySalaries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "approveLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "companyCID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "companyID", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositUSDC",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "employeeAward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "employeeNames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "employeeSalaries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "employeeWalletBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "employees", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllLoanRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEmployeeName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEmployeeSalary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEmployeeWalletBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEmployees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "loans", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rejectLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "requestLoan",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selectEmployeeAward",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmployeeName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setEmployeeSalary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawSalary",
    data: BytesLike
  ): Result;
}

export interface FusePay extends BaseContract {
  connect(runner?: ContractRunner | null): FusePay;
  waitForDeployment(): Promise<this>;

  interface: FusePayInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addEmployee: TypedContractMethod<
    [_employeeAddress: AddressLike],
    [boolean],
    "nonpayable"
  >;

  addMonthlySalaries: TypedContractMethod<[], [void], "nonpayable">;

  admin: TypedContractMethod<[], [string], "view">;

  approveLoan: TypedContractMethod<
    [_employeeAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  companyCID: TypedContractMethod<[], [string], "view">;

  companyID: TypedContractMethod<[], [bigint], "view">;

  depositUSDC: TypedContractMethod<[amount: BigNumberish], [void], "payable">;

  employeeAward: TypedContractMethod<[], [string], "view">;

  employeeNames: TypedContractMethod<[arg0: AddressLike], [string], "view">;

  employeeSalaries: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  employeeWalletBalances: TypedContractMethod<
    [arg0: AddressLike],
    [bigint],
    "view"
  >;

  employees: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  getAdmin: TypedContractMethod<[], [string], "view">;

  getAllLoanRequests: TypedContractMethod<
    [],
    [[string[], bigint[], string[], bigint[]]],
    "view"
  >;

  getEmployeeName: TypedContractMethod<
    [_employeeAddress: AddressLike],
    [string],
    "view"
  >;

  getEmployeeSalary: TypedContractMethod<
    [_employeeAddress: AddressLike],
    [bigint],
    "view"
  >;

  getEmployeeWalletBalance: TypedContractMethod<
    [_employeeAddress: AddressLike],
    [bigint],
    "view"
  >;

  getEmployees: TypedContractMethod<[], [string[]], "view">;

  loans: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, string, bigint] & {
        loanAmount: bigint;
        reason: string;
        status: bigint;
      }
    ],
    "view"
  >;

  rejectLoan: TypedContractMethod<
    [_employeeAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  requestLoan: TypedContractMethod<
    [_amount: BigNumberish, _reason: string],
    [void],
    "nonpayable"
  >;

  selectEmployeeAward: TypedContractMethod<
    [_employeeAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setEmployeeName: TypedContractMethod<
    [_employeeAddress: AddressLike, _name: string],
    [boolean],
    "nonpayable"
  >;

  setEmployeeSalary: TypedContractMethod<
    [_employeeAddress: AddressLike, _salary: BigNumberish],
    [boolean],
    "nonpayable"
  >;

  withdrawSalary: TypedContractMethod<
    [_amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addEmployee"
  ): TypedContractMethod<
    [_employeeAddress: AddressLike],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "addMonthlySalaries"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "approveLoan"
  ): TypedContractMethod<[_employeeAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "companyCID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "companyID"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "depositUSDC"
  ): TypedContractMethod<[amount: BigNumberish], [void], "payable">;
  getFunction(
    nameOrSignature: "employeeAward"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "employeeNames"
  ): TypedContractMethod<[arg0: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "employeeSalaries"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "employeeWalletBalances"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "employees"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getAdmin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getAllLoanRequests"
  ): TypedContractMethod<
    [],
    [[string[], bigint[], string[], bigint[]]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getEmployeeName"
  ): TypedContractMethod<[_employeeAddress: AddressLike], [string], "view">;
  getFunction(
    nameOrSignature: "getEmployeeSalary"
  ): TypedContractMethod<[_employeeAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEmployeeWalletBalance"
  ): TypedContractMethod<[_employeeAddress: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEmployees"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "loans"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [
      [bigint, string, bigint] & {
        loanAmount: bigint;
        reason: string;
        status: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "rejectLoan"
  ): TypedContractMethod<[_employeeAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "requestLoan"
  ): TypedContractMethod<
    [_amount: BigNumberish, _reason: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "selectEmployeeAward"
  ): TypedContractMethod<[_employeeAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setEmployeeName"
  ): TypedContractMethod<
    [_employeeAddress: AddressLike, _name: string],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setEmployeeSalary"
  ): TypedContractMethod<
    [_employeeAddress: AddressLike, _salary: BigNumberish],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawSalary"
  ): TypedContractMethod<[_amount: BigNumberish], [void], "nonpayable">;

  filters: {};
}
