/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface FusePayManagerInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addEmployee"
      | "companies"
      | "companyIDs"
      | "companyIdCounter"
      | "createCompany"
      | "getAdminCompanies"
      | "getCompanies"
      | "getEmployeeCompanies"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addEmployee",
    values: [AddressLike, AddressLike, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "companies",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "companyIDs",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "companyIdCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createCompany",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAdminCompanies",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getCompanies",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEmployeeCompanies",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "addEmployee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "companies", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "companyIDs", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "companyIdCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createCompany",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAdminCompanies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCompanies",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEmployeeCompanies",
    data: BytesLike
  ): Result;
}

export interface FusePayManager extends BaseContract {
  connect(runner?: ContractRunner | null): FusePayManager;
  waitForDeployment(): Promise<this>;

  interface: FusePayManagerInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addEmployee: TypedContractMethod<
    [
      _employeeAddress: AddressLike,
      _companyAddress: AddressLike,
      _salary: BigNumberish,
      _name: string
    ],
    [boolean],
    "nonpayable"
  >;

  companies: TypedContractMethod<[arg0: BigNumberish], [string], "view">;

  companyIDs: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;

  companyIdCounter: TypedContractMethod<[], [bigint], "view">;

  createCompany: TypedContractMethod<
    [companyCID: string],
    [boolean],
    "nonpayable"
  >;

  getAdminCompanies: TypedContractMethod<
    [_admin: AddressLike],
    [string[]],
    "view"
  >;

  getCompanies: TypedContractMethod<[], [string[]], "view">;

  getEmployeeCompanies: TypedContractMethod<
    [_employeeAddress: AddressLike],
    [string[]],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addEmployee"
  ): TypedContractMethod<
    [
      _employeeAddress: AddressLike,
      _companyAddress: AddressLike,
      _salary: BigNumberish,
      _name: string
    ],
    [boolean],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "companies"
  ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "companyIDs"
  ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "companyIdCounter"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "createCompany"
  ): TypedContractMethod<[companyCID: string], [boolean], "nonpayable">;
  getFunction(
    nameOrSignature: "getAdminCompanies"
  ): TypedContractMethod<[_admin: AddressLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getCompanies"
  ): TypedContractMethod<[], [string[]], "view">;
  getFunction(
    nameOrSignature: "getEmployeeCompanies"
  ): TypedContractMethod<[_employeeAddress: AddressLike], [string[]], "view">;

  filters: {};
}
